name: Frontend Continuous Deployment

on:
    workflow_dispatch:
    # push:
    #     branches: 
    #     - main

env:
  # Set Node.js Version
  NODE_VERSION: '18.x'
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_SESSION_TOKEN: ${{secrets.AWS_SESSION_TOKEN}}
  AWS_REGION: us-east-1
  REACT_APP_MOVIE_API_URL: https://my-movie-api.example.com

jobs:
    test-job:
        runs-on: ubuntu-latest

        steps:
            # Checkout code
            - name: Checkout code
              uses: actions/checkout@v3

            # Set up Node.js
            - name: Set up Node.js
              uses: actions/setup-node@v3
              with:
                node-version: ${{env.NODE_VERSION}}

            # Restore cache
            - name: Restore cache
              uses: actions/cache@v3
              with:
                key: npm-cache-${{ hashFiles('**/package-lock.json') }}
                path: ~/.npm

            # Install the dependencies
            - name: Install the dependencies
              run: cd starter/frontend && npm ci

            # Run the tests
            - name: Run the tests
              run: cd starter/frontend && npm test

    build-job:
        # Only run after the first 2 successed
        needs: [test-job]
        runs-on: ubuntu-latest

        steps:
            # Checkout code
            - name: Checkout code
              uses: actions/checkout@v3

            # Configure AWS credentials
            - name: Configure AWS credentials
              uses: aws-actions/configure-aws-credentials@v2
              with:
                aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
                aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
                aws-session-token: ${{env.AWS_SESSION_TOKEN}}
                aws-region: us-east-1

            # Login to Amazon ECR
            - name: Login to Amazon ECR
              id: login-ecr
              uses: aws-actions/amazon-ecr-login@v2
              with:
                mask-password: 'false'
        
            # Build, tag, and push image to Amazon ECR
            - name: Build, tag, and push image to Amazon ECR
              env:
                ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
                ECR_REPOSITORY: frontend
                IMAGE_TAG: ${{ github.sha }}
              run: |
                docker build --build-arg REACT_APP_MOVIE_API_URL=${{env.REACT_APP_MOVIE_API_URL}} -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG starter/frontend/
                docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

    deploy-job:
      needs: [build-job]
      runs-on: ubuntu-latest

      steps:

          # Checkout code
          - name: Checkout code
            uses: actions/checkout@v3

          - name: Configure AWS credentials
            uses: aws-actions/configure-aws-credentials@v2
            with:
              aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
              aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
              aws-session-token: ${{env.AWS_SESSION_TOKEN}}
              aws-region: us-east-1

          # Set up kubectl
          - name: Provision cluster
            uses: azure/setup-kubectl@v3
            with:
              version: 'latest'
            id: install

          # Update kube config
          - name: Update kube config
            run: aws eks update-kubeconfig --name cluster

          # Deploy the application using kubectl
          - name: Deploy the application using kubectl
            run: kubectl apply -k starter/frontend/k8s/
              